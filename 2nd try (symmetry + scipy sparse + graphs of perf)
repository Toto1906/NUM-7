import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import lil_matrix, csr_matrix
from scipy.sparse.linalg import spsolve
import time
import tracemalloc


def solve_quarter_plate(N, L=15, T_ext=20, T_int=500):
    """
    Solve one quarter of the square plate using symmetry+Neumann BCs,
    reconstruct full plate, return T_full, x_full, y_full, elapsed time, peak memory.
    """
    dxy = L/(N+1)
    Nq = (N+1)//2
    Nx = Ny = Nq + 1

    start = time.time()
    tracemalloc.start()

    A = lil_matrix((Nx*Ny, Nx*Ny))
    B = np.zeros(Nx*Ny)

    def idx(i, j): return i*Nx + j

    for i in range(Ny):
        for j in range(Nx):
            k = idx(i, j)
            x = L/2 + j*dxy
            y = L/2 + i*dxy
            # hole region
            if L/3 <= x <= 2*L/3 and L/3 <= y <= 2*L/3:
                A[k, k] = 1; B[k] = T_int; continue
            # outer Dirichlet boundaries
            if i == Ny-1 or j == Nx-1:
                A[k, k] = 1; B[k] = T_ext; continue
            # bottom symmetry edge: Neumann
            if i == 0:
                A[k,k] = -4/dxy**2
                A[k, idx(i+1,j)] =  2/dxy**2
                if j>0:   A[k, idx(i,j-1)] = 1/dxy**2
                if j<Nx-1:A[k, idx(i,j+1)] = 1/dxy**2
                B[k] = 0; continue
            # left symmetry edge: Neumann
            if j == 0:
                A[k,k] = -4/dxy**2
                A[k, idx(i,j+1)] =  2/dxy**2
                if i>0:   A[k, idx(i-1,j)] = 1/dxy**2
                if i<Ny-1:A[k, idx(i+1,j)] = 1/dxy**2
                B[k] = 0; continue
            # interior points
            A[k,k]           = -4/dxy**2
            A[k, idx(i+1,j)] =  1/dxy**2
            A[k, idx(i-1,j)] =  1/dxy**2
            A[k, idx(i,j+1)] =  1/dxy**2
            A[k, idx(i,j-1)] =  1/dxy**2
            B[k] = 0

    A_csr = csr_matrix(A)
    Tq = spsolve(A_csr, B).reshape((Ny, Nx))

    current, peak = tracemalloc.get_traced_memory()
    tracemalloc.stop()
    elapsed = time.time() - start
    peak_mem = peak // 1024

    # mirror to full plate
    Q1 = Tq
    Q2 = np.fliplr(Q1[:,1:])
    Q3 = np.flipud(Q1[1:,:])
    Q4 = np.flipud(np.fliplr(Q1[1:,1:]))
    T_full = np.block([[Q4,Q3],[Q2,Q1]])

    x_full = np.linspace(0, L, N+1)
    y_full = np.linspace(0, L, N+1)
    return T_full, x_full, y_full, elapsed, peak_mem


def mesh_error_vs_reference(N_ref, N_values, L=15):
    """
    Compute reference solution at N_ref, then for each N in N_values,
    compute solution and error relative to reference (downsampled).

    Returns dict:
      'h', 'error', 'time', 'memory'.
    """
    T_ref, x_ref, y_ref, t_ref, m_ref = solve_quarter_plate(N_ref, L)
    results = {'h': [], 'error': [], 'time': [], 'memory': []}

    for N in N_values:
        T, x, y, t, m = solve_quarter_plate(N, L)
        ratio = (N_ref + 1) // (N + 1)
        T_ref_ds = T_ref[::ratio, ::ratio]
        if T_ref_ds.shape != T.shape:
            T_ref_ds = T_ref_ds[:T.shape[0], :T.shape[1]]
        err = np.linalg.norm(T - T_ref_ds) / np.linalg.norm(T_ref_ds)

        results['h'].append(L/(N+1))
        results['error'].append(err)
        results['time'].append(t)
        results['memory'].append(m)

    return results


def plot_temperature(T, x, y, L):
    X, Y = np.meshgrid(x, y)
    fig, ax = plt.subplots()
    im = ax.pcolormesh(X, Y, T, shading='auto', cmap='inferno')
    ax.add_patch(plt.Rectangle((L/3, L/3), L/3, L/3, edgecolor='white', facecolor='none'))
    fig.colorbar(im, ax=ax, label='Temperature (Â°C)')
    ax.set_title('Plate Temperature Distribution')
    ax.set_xlabel('x'); ax.set_ylabel('y')
    ax.set_aspect('equal'); plt.tight_layout(); plt.show()


def plot_convergence(results, N_values):
    """
    Plot error vs grid spacing using reference-based errors, and performance vs N.
    """
    # Sort h and corresponding errors ascending by h
    pairs = sorted(zip(results['h'], results['error']), key=lambda x: x[0])
    h_sorted, err_sorted = zip(*pairs)

    plt.figure()
    plt.loglog(h_sorted, err_sorted, 'o-')
    plt.xlabel('Grid spacing h')
    plt.ylabel('Relative error vs ref')
    plt.title('Error vs h')
    plt.grid(True, which='both', linestyle='--')
    plt.tight_layout()
    plt.show()

    # Performance vs N_values
    times = results['time']
    mems = results['memory']

    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()
    ax1.plot(N_values, times, 'o-', label='Time (s)')
    ax2.plot(N_values, mems, 's--', label='Memory (kB)', color='gray')
    ax1.set_xlabel('N')
    ax1.set_ylabel('Time (s)')
    ax2.set_ylabel('Peak Memory (kB)')
    fig.legend(loc='upper right')
    plt.title('Performance vs N')
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    N_ref = 800
    coarser = [25, 50, 100, 200, 400]
    results = mesh_error_vs_reference(N_ref, coarser)

    # Plot reference solution
    Tref, xref, yref, _, _ = solve_quarter_plate(N_ref)
    plot_temperature(Tref, xref, yref, L=15)

    # Plot error convergence and performance
    plot_convergence(results, coarser)
